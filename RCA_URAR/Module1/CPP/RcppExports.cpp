// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// convolveCpp
NumericVector convolveCpp(const NumericVector& a, const NumericVector& b);
RcppExport SEXP _Mkt01_convolveCpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(convolveCpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// modifyDataFrame
DataFrame modifyDataFrame(DataFrame df);
RcppExport SEXP _Mkt01_modifyDataFrame(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(modifyDataFrame(df));
    return rcpp_result_gen;
END_RCPP
}
// DateExample
List DateExample(DateVector& dv, DatetimeVector& dtv);
RcppExport SEXP _Mkt01_DateExample(SEXP dvSEXP, SEXP dtvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DateVector& >::type dv(dvSEXP);
    Rcpp::traits::input_parameter< DatetimeVector& >::type dtv(dtvSEXP);
    rcpp_result_gen = Rcpp::wrap(DateExample(dv, dtv));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _Mkt01_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// makeDataFrame
RcppExport SEXP makeDataFrame(SEXP inX);
RcppExport SEXP _Mkt01_makeDataFrame(SEXP inXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type inX(inXSEXP);
    rcpp_result_gen = Rcpp::wrap(makeDataFrame(inX));
    return rcpp_result_gen;
END_RCPP
}
// FibCpp0
std::vector<int> FibCpp0(int n);
RcppExport SEXP _Mkt01_FibCpp0(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(FibCpp0(n));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _Mkt01_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_CQA_MAP();

static const R_CallMethodDef CallEntries[] = {
    {"_Mkt01_convolveCpp", (DL_FUNC) &_Mkt01_convolveCpp, 2},
    {"_Mkt01_modifyDataFrame", (DL_FUNC) &_Mkt01_modifyDataFrame, 1},
    {"_Mkt01_DateExample", (DL_FUNC) &_Mkt01_DateExample, 2},
    {"_Mkt01_timesTwo", (DL_FUNC) &_Mkt01_timesTwo, 1},
    {"_Mkt01_makeDataFrame", (DL_FUNC) &_Mkt01_makeDataFrame, 1},
    {"_Mkt01_FibCpp0", (DL_FUNC) &_Mkt01_FibCpp0, 1},
    {"_Mkt01_rcpp_hello_world", (DL_FUNC) &_Mkt01_rcpp_hello_world, 0},
    {"_rcpp_module_boot_CQA_MAP", (DL_FUNC) &_rcpp_module_boot_CQA_MAP, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Mkt01(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
